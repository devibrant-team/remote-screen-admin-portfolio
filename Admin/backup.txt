import { useState } from "react";
import { useDebounce } from "../Redux/Slices/hooks/useDebounce";
import { useSearchUsersQuery } from "../Redux/Slices/userSearchSlice";


const UserScreens = () => {
  const [search, setSearch] = useState("");
  const [planFilter, setPlanFilter] = useState("");
  const debouncedSearch = useDebounce(search, 500);

const { data, error, isLoading } = useSearchUsersQuery({
  query: debouncedSearch.trim(), // send only the query param
});


  const users = data?.user || [];
  console.log(users)

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      <h1 className="text-2xl font-bold mb-6">User Management</h1>

      <div className="p-4 bg-white rounded shadow">
        <div className="flex flex-col sm:flex-row items-center gap-4 mb-4">
          <select
            value={planFilter}
            onChange={(e) => setPlanFilter(e.target.value)}
            className="border rounded px-3 py-2"
          >
            <option value="">All Plans</option>
            <option value="Basic">Basic</option>
            <option value="Premium">Premium</option>
            <option value="Business">Business</option>
          </select>

          <input
            type="text"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            placeholder="Search by name or email..."
            className="border rounded px-3 py-2 flex-grow"
          />
        </div>

        {isLoading ? (
          <div className="text-center py-4">Loading...</div>
        ) : error ? (
          <div className="text-red-500 text-center py-4">
            {(error as any)?.data?.message || "Error fetching users"}
          </div>
        ) : users.length > 0 ? (
          <table className="min-w-full border">
            <thead className="bg-gray-200">
              <tr>
                <th className="p-2 border">ID</th>
                <th className="p-2 border">Email</th>
                <th className="p-2 border">Name</th>
                <th className="p-2 border">Plan</th>
                <th className="p-2 border">Joined</th>
              </tr>
            </thead>
            <tbody>
              {users.map((u: any, i: number) => (
                <tr key={u.id} className={i % 2 ? "bg-gray-50" : ""}>
                  <td className="p-2 border">{u.id}</td>
                  <td className="p-2 border">{u.email}</td>
                  <td className="p-2 border">{u.name}</td>
                  <td className="p-2 border">{u.plan}</td>
                  <td className="p-2 border">{u.joined}</td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <div className="text-center py-4 text-gray-500">
            No matching users found.
          </div>
        )}
      </div>
    </div>
  );
};
export default UserScreens;




   {selectedUser.screens.length > 0 ? (
              <div className="overflow-x-auto">
                <table className="min-w-full border text-sm sm:text-base">
                  <thead className="bg-gray-100">
                    <tr>
                      <th className="p-2 border text-left">Screen ID</th>
                      <th className="p-2 border text-left">Type</th>
                      <th className="p-2 border text-left">Ratio</th>
                      <th className="p-2 border text-left">IsExtra</th>
                    </tr>
                  </thead>
                  <tbody>
                    {selectedUser.screens.map((screen, index) => (
                      <tr
                        key={screen.id}
                        className={index % 2 ? "bg-[var(--white-200)]" : ""}
                      >
                        <td className="p-2 border">{screen.id}</td>
                        <td className="p-2 border">{screen.type}</td>
                        <td className="p-2 border">{screen.ratio}</td>
                        <td className="p-2 border">
                          {screen.isExtra ? (
                            <span className="inline-block px-2 py-0.5 text-xs font-medium bg-green-100 text-green-800 rounded-full">
                              Yes
                            </span>
                          ) : (
                            <span className="inline-block px-2 py-0.5 text-xs font-medium bg-gray-200 text-gray-700 rounded-full">
                              No
                            </span>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="text-center text-gray-500">
                No screens assigned.
              </div>
            )}